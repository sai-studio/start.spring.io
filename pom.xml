<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.7.RELEASE</version>
		<relativePath/>
	</parent>
	<groupId>io.spring.start</groupId>
	<artifactId>css-spring-start-parent</artifactId>
	<version>${revision}</version>
	<packaging>pom</packaging>
	<name>start.spring.io</name>

	<developers>
		<developer>
			<id>Sai</id>
			<name>Li Zhixiong</name>
			<email>dgsai@vip.qq.com</email>
			<organization>东莞理工学院-网络空间安全学院</organization>
			<organizationUrl>https://css.dgut.edu.cn</organizationUrl>
			<roles>
				<role>项目负责人</role>
			</roles>
		</developer>
	</developers>

	<properties>
		<revision>0.0.1-SNAPSHOT</revision>
		<disable.checks>false</disable.checks>
		<spring-initializr.version>0.9.0.BUILD-SNAPSHOT</spring-initializr.version>
		<spring-javaformat.version>0.0.20</spring-javaformat.version>

		<!-- 阿里云-容器镜像服务-命名空间 -->
		<docker.image.prefix>dgut_lab</docker.image.prefix>
		<!-- 阿里云-镜像仓库公网地址 -->
		<docker.aliyun.registryUrl>registry.cn-shenzhen.aliyuncs.com</docker.aliyun.registryUrl>
		<!-- docker镜像打包开关 -->
		<dockerfile.skip>true</dockerfile.skip>
	</properties>

	<modules>
		<module>start-client</module>
		<module>start-site</module>
	</modules>

	<profiles>
		<profile>
			<id>verification</id>
			<modules>
				<module>start-site-verification</module>
			</modules>
			<properties>
				<skipTests>true</skipTests>
			</properties>
		</profile>
		<profile>
			<id>full</id>
			<modules>
				<module>start-site-verification</module>
			</modules>
		</profile>
	</profiles>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.spring.initializr</groupId>
				<artifactId>initializr-bom</artifactId>
				<version>${spring-initializr.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>io.spring.start</groupId>
				<artifactId>css-spring-start-client</artifactId>
				<version>${revision}</version>
			</dependency>
			<dependency>
				<groupId>io.spring.start</groupId>
				<artifactId>css-spring-start-site</artifactId>
				<version>${revision}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>flatten-maven-plugin</artifactId>
					<version>1.1.0</version>
				</plugin>
				<plugin>
					<groupId>io.spring.javaformat</groupId>
					<artifactId>spring-javaformat-maven-plugin</artifactId>
					<version>${spring-javaformat.version}</version>
					<executions>
						<execution>
							<phase>validate</phase>
							<configuration>
								<skip>${disable.checks}</skip>
							</configuration>
							<goals>
								<goal>validate</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>3.1.0</version>
					<executions>
						<execution>
							<id>checkstyle-validation</id>
							<phase>validate</phase>
							<configuration>
								<skip>${disable.checks}</skip>
								<configLocation>io/spring/javaformat/checkstyle/checkstyle.xml</configLocation>
								<includeTestSourceDirectory>true</includeTestSourceDirectory>
							</configuration>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>com.puppycrawl.tools</groupId>
							<artifactId>checkstyle</artifactId>
							<version>8.29</version>
						</dependency>
						<dependency>
							<groupId>io.spring.javaformat</groupId>
							<artifactId>spring-javaformat-checkstyle</artifactId>
							<version>${spring-javaformat.version}</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>com.github.eirslett</groupId>
					<artifactId>frontend-maven-plugin</artifactId>
					<version>1.7.5</version>
				</plugin>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>flatten-maven-plugin</artifactId>
				<inherited>true</inherited>
				<executions>
					<execution>
						<!-- Tidy up all POMs before they are published -->
						<id>flatten</id>
						<phase>process-resources</phase>
						<goals>
							<goal>flatten</goal>
						</goals>
						<configuration>
							<updatePomFile>true</updatePomFile>
							<flattenMode>oss</flattenMode>
							<pomElements>
								<parent>expand</parent>
								<distributionManagement>remove</distributionManagement>
								<repositories>remove</repositories>
							</pomElements>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 构建Docker镜像 -->
			<!-- start::dockerfile插件 -->
			<!-- https://mvnrepository.com/artifact/com.spotify/dockerfile-maven-plugin -->
			<!-- https://github.com/spotify/dockerfile-maven -->
			<!-- https://blog.csdn.net/liubingyu12345/article/details/79015966 -->
			<!-- https://www.jianshu.com/p/acb1f062a925 -->
			<!-- 源码所在机器，即客户机配置一条环境变量DOCKER_HOST=tcp://ip:2375。ip替换成远程docker服务器的机器ip，这样客户机就能远程访问Docker环境了。-->
			<!-- 例子： https://github.com/spotify/dockerfile-maven/blob/master/plugin/src/it/advanced/backend/pom.xml -->
			<!--
			 	在本地计算机执行打包脚本，连接远程docker守护进程进行打包。
			 	执行脚本前，必须在本地电脑 docker login -u dgsai@vip.qq.com registry.cn-shenzhen.aliyuncs.com
			 	输入密码。
			 -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>1.4.13</version>
				<executions>
					<execution>
						<id>build-and-tag-latest</id>
						<phase>none</phase>
						<goals>
							<goal>build</goal>
						</goals>
					</execution>
					<execution>
						<id>tag-version</id>
						<phase>none</phase>
						<goals>
							<goal>tag</goal>
						</goals>
						<configuration>
							<tag>${project.version}</tag>
						</configuration>
					</execution>
					<execution>
						<id>push-latest</id>
						<phase>none</phase>
						<goals>
							<goal>push</goal>
						</goals>
						<configuration>
							<tag>latest</tag>
						</configuration>
					</execution>
					<execution>
						<id>push-version</id>
						<phase>none</phase>
						<goals>
							<goal>push</goal>
						</goals>
						<configuration>
							<tag>${project.version}</tag>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<skip>${dockerfile.skip}</skip>
					<repository>${docker.aliyun.registryUrl}/${docker.image.prefix}/${project.artifactId}</repository>
					<buildArgs>
						<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
					</buildArgs>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>spring-snapshots</id>
			<name>Spring Snapshots</name>
			<url>https://repo.spring.io/libs-snapshot</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<!-- 中科大Maven反向代理 -->
		<repository>
			<id>ustc-maven-proxy</id>
			<name>中科大Maven反向代理</name>
			<url>https://maven.proxy.ustclug.org/maven2/</url>
		</repository>

	</repositories>

</project>
